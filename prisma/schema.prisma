generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aime {
  id             Int          @id @default(autoincrement())
  utilisateur_id Int?
  post_id        Int?
  date_creation  DateTime?    @default(now()) @db.Timestamp(0)
  utilisateur    utilisateur? @relation(fields: [utilisateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post           post?        @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([post_id])
  @@index([utilisateur_id])
}

model commentaire {
  id             Int          @id @default(autoincrement())
  utilisateur_id Int?
  post_id        Int?
  message        String?      @db.Text
  date_creation  DateTime?    @default(now()) @db.Timestamp(0)
  utilisateur    utilisateur? @relation(fields: [utilisateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post           post?        @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([post_id])
  @@index([utilisateur_id])
}

model follower {
  id            Int          @id @default(autoincrement())
  following_id  Int?
  follower_id   Int?
  date_creation DateTime?    @default(now()) @db.Timestamp(0)
  following     utilisateur? @relation("follower_following", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  follower      utilisateur? @relation("follower_follower", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([follower_id])
  @@index([following_id])
}

model post {
  id                Int           @id @default(autoincrement())
  utilisateur_id    Int?
  caption           String?       @db.Text
  image_url         String?       @db.VarChar(255)
  date_creation     DateTime?     @default(now()) @db.Timestamp(0)
  date_modification DateTime?     @default(now()) @db.Timestamp(0)
  aime              aime[]
  commentaire       commentaire[]
  utilisateur       utilisateur?  @relation(fields: [utilisateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([utilisateur_id])
}

model utilisateur {
  id                 Int           @id @default(autoincrement())
  firstname          String?       @db.VarChar(255)
  lastname           String?       @db.VarChar(255)
  email              String?       @unique @db.VarChar(255)
  password           String?       @db.VarChar(255)
  isAdmin            Boolean?
  date_creation      DateTime?     @default(now()) @db.Timestamp(0)
  date_modification  DateTime?     @default(now()) @db.Timestamp(0)
  aime               aime[]
  commentaire        commentaire[]
  follower_following follower[]    @relation("follower_following")
  follower_follower  follower[]    @relation("follower_follower")
  post               post[]
  profile            profile?
}

model profile {
  id                Int         @id @default(autoincrement())
  sexe              String?     @db.VarChar(255)
  pays              String?     @db.VarChar(255)
  ville             String?     @db.VarChar(255)
  date_creation     DateTime?   @default(now()) @db.Timestamp(0)
  date_modification DateTime?   @default(now()) @db.Timestamp(0)
  id_utilisateur    Int         @unique
  utilisateur       utilisateur @relation(fields: [id_utilisateur], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
